package de.jeha.s3pt.utils;

import java.util.Random;
import java.io.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/* Input stream that generates random data with three possible configurations:
 * <ul>
 *     <li>Fully random stream created by calling one argument constructor.</li>
 *     <li>Stream that starts with fixed uniform block of bytes followed by fully random data.</li>
 *     <li>Stream that creates fixed blocks and populates each with randomly generated new byte.</li>
 * </ul>
 *
 * The first option is quite universal and may be used for any type of tests. The second option might be
 * useful when testing logic dependent on compressed data size and archived data are transferred via
 * network. However, the second configuration is not efficient in terms of complexity of compression and
 * its speed. In order to remove this bias the third configuration was introduced to provide evenly
 * distributed data that provide steady load for compression and decompression of generated files.
 *
 * @author Petr Fiala, Jakub Stas
 */
public class RandomGeneratedInputStream extends InputStream {

    private static final Logger LOG = LoggerFactory.getLogger(RandomGeneratedInputStream.class);

    private final Random generator = new Random();

    /** Target size of the stream. */
    private final long size;

    private long mark;

    /** Size of the block populated by same byte. */
    private final long blockSize;

    /** Size of expandable block being populated by same byte. */
    private long currentBlockSize;

    /** Value of last generated byte. */
    private int lastUsedByte;

    /** Internal counter. */
    private long index;
    private boolean closed;

    private byte[] buffer;

    /**
     * @param size target size of the stream [byte]
     */
    public RandomGeneratedInputStream(long size) {
        this(size, 4096);
    }

    /**
     * @param size target size of the stream [byte]
     * @param blockSize size of the block populated by same byte [byte]
     * @param type randomization strategy
     */
    public RandomGeneratedInputStream(long size, long blockSize) {
        super();

        if (blockSize < 1) {
            throw new IllegalArgumentException("Block size must be at least one byte!");
        }

        this.size = size;
        this.index = 0;
        this.mark = 0;
        this.blockSize = blockSize;
        this.buffer = new byte[(int)blockSize];
        generator.nextBytes(this.buffer);

        this.closed = false;
        this.currentBlockSize = blockSize;
    }

    public void rewind() {
        this.index = 0;
    }


    @Override
    public boolean markSupported() {
        return true;
    }

    @Override
    public void mark(int limit) {
        LOG.debug("Marking {}, with {}", this.index, limit);
        if (this.mark != this.index) {
            //generator.nextBytes(this.buffer);
            this.mark = index;
        }
    }

    @Override
    public void reset() {
        LOG.debug("Resetting to mark");
        this.index = mark;
    }

    @Override
    public int read() throws IOException {
        LOG.debug("Simple read");
        checkOpen();
        if (index < size) {
            index++;
        } else {
            return -1;
        }
        int result = generator.nextInt() % 256;
        if (result < 0) {
            result = -result;
        }
        LOG.debug("Generated 1 byte");
        return result;
    }

    @Override
    public int read(byte[] data, int offset, int length) throws IOException {
        LOG.debug("Offset read {}, {}, {}", data.length, offset, length);
        checkOpen();
        int bytesToWrite = (int)Math.min(length, size - index);
        LOG.debug("Going to write {} bytes, {}/{}", bytesToWrite, index, size);
        if (bytesToWrite < 1) {
            return -1;
        }

        System.arraycopy(buffer, (int)(index % blockSize), data, offset, length);
        index += bytesToWrite;
        LOG.debug("Generated {}", bytesToWrite);
        return bytesToWrite;

    }

    @Override
    public int read(byte[] data) throws IOException {
        LOG.debug("Read bytes {}", data.length);
        checkOpen();
        int len = (int)Math.min(data.length, size - index);
        if (len > 0) {
            generator.nextBytes(data);
            index += len;
        } else {
            return -1;
        }
        LOG.debug("Generated {}", len);
        return len;
    }

    @Override
    public long skip(long bytesToSkip) throws IOException {
        checkOpen();
        index += bytesToSkip;
        return bytesToSkip;
    }

    @Override
    public void close() {
        this.closed = true;
    }

    private void checkOpen() throws IOException {
        if (closed) {
            throw new IOException("Input stream closed");
        }
    }

    @Override
    public int available() {
        return (int)(size - index);
    }
}
